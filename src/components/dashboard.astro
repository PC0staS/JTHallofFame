---
import Navbar from "./navbar.astro";
import Layout from "../layouts/Layout.astro";
import Gallery from "./Gallery.tsx";
import { getPhotos as getPhotosFromSupabase, checkDatabaseConnection } from "../lib/supabase";
import { getPublicUrl } from "../lib/cloudflare-r2";

// Obtener información del usuario autenticado
const auth = Astro.locals.auth();
const userId = auth.userId;

console.log('Dashboard auth info:', { 
  userId, 
  hasAuth: !!auth,
  authKeys: Object.keys(auth || {})
});

// Obtener información detallada del usuario
let userName: string | null = null;
let userImageUrl: string | null = null;
if (userId) {
  try {
    // Intenta obtener el username real de Clerk
    const response = await fetch(`${Astro.url.origin}/api/user`, {
      headers: {
        'Cookie': Astro.request.headers.get('Cookie') || ''
      }
    });
    if (response.ok) {
      const userData = await response.json();
      userName = userData.username || userData.displayName || `user-${userId.slice(-8)}`;
      userImageUrl = userData.imageUrl || null;
      console.log('User data fetched:', { userName, userImageUrl, userData });
    } else {
      userName = `user-${userId.slice(-8)}`;
      console.log('User data fetch failed, using fallback:', userName);
    }
  } catch (error) {
    console.error('Error fetching user data:', error);
    userName = `user-${userId.slice(-8)}`;
  }
}

// Verificar conexión a la base de datos
const dbStatus = await checkDatabaseConnection();
console.log('Database status:', dbStatus);

// Obtener fotos desde Supabase
let photos: any[] = [];
let errorMessage = '';

try {
  if (dbStatus.tableExists) {
    const rawPhotos = await getPhotosFromSupabase();
    // Adaptar para que cada foto tenga image_url válido
    photos = rawPhotos.map(photo => {
      // Si ya tiene image_url, usarla; si no, construirla si hay user_id y image_name
      let image_url = photo.image_url;
      if (!image_url && photo.user_id && photo.image_name) {
        // Intentar construir la ruta relativa
        const relativePath = `${photo.user_id}/${photo.image_name}`;
        image_url = getPublicUrl(relativePath);
      }
      return {
        ...photo,
        image_url
      };
    });
  } else {
    errorMessage = dbStatus.message;
  }
} catch (error) {
  console.error('Error al cargar fotos:', error);
  errorMessage = 'Error al conectar con la base de datos';
}
---

<Layout title="Galería de Memes">
  <Navbar />
  
  <main class="main-content">
    {errorMessage && (
      <div class="container-fluid p-4">
        <div class="alert alert-warning" role="alert">
          <h4 class="alert-heading">⚠️ Configuración requerida</h4>
          <p>{errorMessage}</p>
          <hr>
          <p class="mb-0">
            Para configurar la base de datos, ejecuta el siguiente comando en tu proyecto de Supabase:
            <br>
            <code class="bg-dark text-light p-2 d-block mt-2">
              Copia el contenido de supabase-setup.sql y ejecútalo en el SQL Editor de Supabase
            </code>
          </p>
        </div>
      </div>
    )}
    
    <Gallery 
      photos={photos} 
      currentUserId={userId || undefined}
      currentUserName={userName || undefined}
      currentUserImageUrl={userImageUrl || undefined}
      client:only="react"
    />
  </main>
</Layout>

<style>
  .main-content {
    padding-top: 90px; /* Espacio para la navbar fija */
    min-height: 100vh;
  }

  @media (max-width: 768px) {
    .main-content {
      padding-top: 80px; /* Menos padding en móviles */
    }
  }
</style>